#!/usr/bin/env python3
"""
GenAI Agent for 3D Modeling - Main entry point
"""

import asyncio
import argparse
import logging
import yaml
from pathlib import Path
import sys

from genai_agent.agent import GenAIAgent
from genai_agent.config import load_config
from env_loader import get_env, get_config

# Import direct service integration
from genai_agent.core.services import initialize_services, register_with_agent

# Setup logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger('genai_agent')

async def main():
    # Parse command line arguments
    parser = argparse.ArgumentParser(description='GenAI Agent for 3D Modeling')
    parser.add_argument('--config', type=str, default='config.yaml', 
                        help='Path to configuration file')
    parser.add_argument('--instruction', type=str, 
                        help='Instruction to process')
    parser.add_argument('--direct-services', action='store_true',
                        help='Use direct service initialization instead of Redis')
    args = parser.parse_args()
    
    # Load configuration - will search in multiple locations if needed
    config = load_config(args.config)
    
    # Pre-initialize essential services if direct services mode enabled
    if args.direct_services or config.get("USE_DIRECT_SERVICES", False):
        logger.info("Initializing direct services...")
        try:
            initialize_services()
            logger.info("Direct services initialized successfully")
        except Exception as e:
            logger.error(f"Error initializing direct services: {str(e)}")
            sys.exit(1)
    
    # Initialize agent
    agent = GenAIAgent(config)
    
    # Register direct services with agent if enabled
    if args.direct_services or config.get("USE_DIRECT_SERVICES", False):
        logger.info("Registering direct services with agent...")
        try:
            register_with_agent(agent)
            logger.info("Direct services registered with agent")
        except Exception as e:
            logger.error(f"Error registering direct services: {str(e)}")
    
    try:
        # Process instruction if provided
        if args.instruction:
            result = await agent.process_instruction(args.instruction)
            print(result)
        else:
            # Interactive mode
            print("GenAI Agent - Interactive Mode")
            print("Type 'exit' to quit")
            
            while True:
                instruction = input(">> ")
                if instruction.lower() == 'exit':
                    break
                    
                result = await agent.process_instruction(instruction)
                print(result)
    finally:
        # Clean up resources
        await agent.cleanup()
    
if __name__ == "__main__":
    asyncio.run(main())


# Add health check endpoint for FastAPI if running in API mode
try:
    from fastapi import FastAPI
    app = FastAPI()
    
    @app.get("/api/health")
    async def health_check():
        """Health check endpoint for service monitoring"""
        return {"status": "ok", "message": "Service is healthy"}
    
    @app.get("/api/services/status")
    async def service_status():
        """Check status of all services"""
        from genai_agent.core.services import integrator
        
        try:
            status = integrator.check_services()
            return {
                "status": "ok",
                "services": status
            }
        except Exception as e:
            return {
                "status": "error",
                "message": str(e)
            }
except ImportError:
    # FastAPI not available, skip API endpoints
    pass
