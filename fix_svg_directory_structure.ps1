# PowerShell script to fix SVG directory structure
# This script creates and consolidates the SVG directories

# Define paths
$ProjectRoot = "C:\ZB_Share\Labs\src\CluadeMCP\genai-agent-3d"
$SVGOutputDir = "$ProjectRoot\output\svg"
$SVGToVideoSVGDir = "$ProjectRoot\output\svg_to_video\svg"
$TestSVGDir = "$ProjectRoot\genai_agent_project\output\svg"
$SVGToVideoModelsDir = "$ProjectRoot\output\svg_to_video\models"
$SVGToVideoAnimationsDir = "$ProjectRoot\output\svg_to_video\animations"
$SVGToVideoVideosDir = "$ProjectRoot\output\svg_to_video\videos"

$BackupTimestamp = Get-Date -Format "yyyyMMdd_HHmmss"

Write-Host "SVG Directory Structure Fixer" -ForegroundColor Green
Write-Host "===========================" -ForegroundColor Green
Write-Host ""

# Function to ensure a directory exists
function Ensure-Directory-Exists {
    param (
        [string]$Path
    )
    
    if (Test-Path $Path) {
        # Check if it's a file instead of a directory
        if ((Get-Item $Path).PSIsContainer -eq $false) {
            Write-Host "  Path exists as a file instead of a directory: $Path" -ForegroundColor Yellow
            
            # Create backup of the file
            $BackupPath = "$Path.backup_$BackupTimestamp"
            Move-Item -Path $Path -Destination $BackupPath -Force
            Write-Host "  Created backup at: $BackupPath" -ForegroundColor Gray
            
            # Create directory
            New-Item -ItemType Directory -Path $Path -Force | Out-Null
            Write-Host "  Created directory: $Path" -ForegroundColor Green
            return $true
        } else {
            Write-Host "  Directory already exists: $Path" -ForegroundColor Gray
            return $false
        }
    } else {
        # Create directory
        New-Item -ItemType Directory -Path $Path -Force | Out-Null
        Write-Host "  Created directory: $Path" -ForegroundColor Green
        return $true
    }
}

# Ensure all required directories exist
Write-Host "Ensuring all required directories exist..." -ForegroundColor Cyan
Ensure-Directory-Exists -Path $SVGOutputDir
Ensure-Directory-Exists -Path $SVGToVideoSVGDir
Ensure-Directory-Exists -Path $TestSVGDir
Ensure-Directory-Exists -Path $SVGToVideoModelsDir
Ensure-Directory-Exists -Path $SVGToVideoAnimationsDir
Ensure-Directory-Exists -Path $SVGToVideoVideosDir

# Create simple test SVG file
Write-Host "Creating test SVG file..." -ForegroundColor Cyan
$TestSVGPath = "$SVGOutputDir\test_directory_structure.svg"
$TestSVGContent = @"
<svg width="200" height="200" xmlns="http://www.w3.org/2000/svg">
  <rect width="200" height="200" fill="#f0f0f0" />
  <circle cx="100" cy="100" r="50" fill="blue" opacity="0.5" />
  <text x="100" y="100" font-family="Arial" font-size="16" text-anchor="middle" fill="black">
    SVG Test
  </text>
  <text x="100" y="130" font-family="Arial" font-size="12" text-anchor="middle" fill="black">
    Created: $(Get-Date -Format "yyyy-MM-dd HH:mm:ss")
  </text>
</svg>
"@
Set-Content -Path $TestSVGPath -Value $TestSVGContent -Encoding UTF8
Write-Host "  Created test SVG file: $TestSVGPath" -ForegroundColor Green

# Copy the test SVG file to the other directories
Write-Host "Copying test SVG file to other directories..." -ForegroundColor Cyan
Copy-Item -Path $TestSVGPath -Destination $SVGToVideoSVGDir -Force
Copy-Item -Path $TestSVGPath -Destination $TestSVGDir -Force
Write-Host "  Copied test SVG file to other directories" -ForegroundColor Green

# Create a README.md file in each directory explaining its purpose
Write-Host "Creating README files in each directory..." -ForegroundColor Cyan

$SVGOutputReadme = @"
# SVG Output Directory

This directory contains SVG files generated by the SVG Generator.

This is the primary location where all SVG files should be stored.
"@
Set-Content -Path "$SVGOutputDir\README.md" -Value $SVGOutputReadme -Encoding UTF8

$SVGToVideoSVGReadme = @"
# SVG to Video SVG Directory

This directory contains SVG files used by the SVG to Video pipeline.

For compatibility with the web UI, this directory should mirror the content of the main SVG output directory.
"@
Set-Content -Path "$SVGToVideoSVGDir\README.md" -Value $SVGToVideoSVGReadme -Encoding UTF8

$TestSVGReadme = @"
# Test SVG Directory

This directory contains SVG files used for testing.

For compatibility with the test scripts, this directory should mirror the content of the main SVG output directory.
"@
Set-Content -Path "$TestSVGDir\README.md" -Value $TestSVGReadme -Encoding UTF8

Write-Host "  Created README files in each directory" -ForegroundColor Green

# Create script to synchronize directories
Write-Host "Creating directory synchronization script..." -ForegroundColor Cyan
$SyncScriptPath = "$ProjectRoot\sync_svg_directories.ps1"
$SyncScriptContent = @"
# PowerShell script to synchronize SVG directories
# Run this script when you need to make sure all SVG directories have the latest files

`$ProjectRoot = "$ProjectRoot"
`$SVGOutputDir = "`$ProjectRoot\output\svg"
`$SVGToVideoSVGDir = "`$ProjectRoot\output\svg_to_video\svg"
`$TestSVGDir = "`$ProjectRoot\genai_agent_project\output\svg"

Write-Host "SVG Directory Synchronization" -ForegroundColor Green
Write-Host "===========================" -ForegroundColor Green
Write-Host ""

# Function to sync directories (copies files from source to target)
function Sync-Directories {
    param (
        [string]`$Source,
        [string]`$Target,
        [string]`$Label
    )
    
    if (-not (Test-Path `$Source)) {
        Write-Host "  Source directory does not exist: `$Source" -ForegroundColor Red
        return 0
    }
    
    if (-not (Test-Path `$Target)) {
        New-Item -ItemType Directory -Path `$Target -Force | Out-Null
        Write-Host "  Created target directory: `$Target" -ForegroundColor Yellow
    }
    
    `$Files = Get-ChildItem -Path `$Source -File | Where-Object { `$_.Name -ne "README.md" }
    `$CopiedCount = 0
    
    foreach (`$File in `$Files) {
        `$TargetPath = Join-Path `$Target `$File.Name
        if (-not (Test-Path `$TargetPath) -or 
            (Get-Item `$TargetPath).LastWriteTime -lt `$File.LastWriteTime) {
            Copy-Item -Path `$File.FullName -Destination `$TargetPath -Force
            `$CopiedCount++
        }
    }
    
    Write-Host "  Copied `$CopiedCount files to `$Label" -ForegroundColor Green
    return `$CopiedCount
}

# Consolidate files from all directories to main SVG directory
Write-Host "Consolidating files to main SVG directory..." -ForegroundColor Cyan
`$ConsolidatedCount = 0

# Copy from SVG to Video directory to main SVG directory
`$ConsolidatedCount += Sync-Directories -Source `$SVGToVideoSVGDir -Target `$SVGOutputDir -Label "main SVG directory (from SVG to Video)"

# Copy from Test directory to main SVG directory
`$ConsolidatedCount += Sync-Directories -Source `$TestSVGDir -Target `$SVGOutputDir -Label "main SVG directory (from Test)"

Write-Host "  Consolidated `$ConsolidatedCount files to main SVG directory" -ForegroundColor Green

# Sync from main SVG directory to other directories
Write-Host "Syncing from main SVG directory to other directories..." -ForegroundColor Cyan

# Copy from main SVG directory to SVG to Video directory
Sync-Directories -Source `$SVGOutputDir -Target `$SVGToVideoSVGDir -Label "SVG to Video directory"

# Copy from main SVG directory to Test directory
Sync-Directories -Source `$SVGOutputDir -Target `$TestSVGDir -Label "Test directory"

Write-Host "SVG directory synchronization complete!" -ForegroundColor Green
"@
Set-Content -Path $SyncScriptPath -Value $SyncScriptContent -Encoding UTF8
Write-Host "  Created directory synchronization script: $SyncScriptPath" -ForegroundColor Green

# Create a batch file to run the synchronization script
$SyncBatchPath = "$ProjectRoot\sync_svg_directories.bat"
$SyncBatchContent = @"
@echo off
echo SVG Directory Synchronization
echo ===========================
echo.

powershell -ExecutionPolicy Bypass -File sync_svg_directories.ps1
echo.

echo Synchronization complete!
pause
"@
Set-Content -Path $SyncBatchPath -Value $SyncBatchContent -Encoding UTF8
Write-Host "  Created batch file to run synchronization script: $SyncBatchPath" -ForegroundColor Green

# Summary
Write-Host ""
Write-Host "SVG Directory Structure Fix Complete!" -ForegroundColor Green
Write-Host "------------------------------------" -ForegroundColor Green
Write-Host "Created directories:"
Write-Host "1. $SVGOutputDir" -ForegroundColor Yellow
Write-Host "2. $SVGToVideoSVGDir" -ForegroundColor Yellow
Write-Host "3. $TestSVGDir" -ForegroundColor Yellow
Write-Host "4. $SVGToVideoModelsDir" -ForegroundColor Yellow
Write-Host "5. $SVGToVideoAnimationsDir" -ForegroundColor Yellow
Write-Host "6. $SVGToVideoVideosDir" -ForegroundColor Yellow
Write-Host ""
Write-Host "Created a test SVG file and synchronized it across directories."
Write-Host ""
Write-Host "Created a synchronization script to keep all directories in sync:"
Write-Host "  $SyncScriptPath" -ForegroundColor Yellow
Write-Host ""
Write-Host "To synchronize directories in the future, run:"
Write-Host "  sync_svg_directories.bat" -ForegroundColor Yellow
Write-Host ""
